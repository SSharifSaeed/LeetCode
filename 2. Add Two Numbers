/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* ReverseList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next = NULL;

    while (current != NULL){
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;

}
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    int carry = 0;
    int sum;
    struct ListNode* Finallist = malloc(sizeof(struct ListNode));
    Finallist->val = 0;
    Finallist->next = NULL;
    struct ListNode* Current = Finallist;
    
    while (l1 != NULL || l2 != NULL || carry != 0){
        int val1 = (l1 != NULL) ? l1->val : 0;
        int val2 = (l2 != NULL) ? l2->val : 0;

        sum = val1 + val2 + carry;
        carry = sum / 10;

        struct ListNode* newNode = malloc(sizeof(struct ListNode));
        newNode->val = sum%10;
        newNode->next = NULL;
        Current->next = newNode;
        Current = Current->next;

        if(l1 != NULL) l1 = l1->next;
        if(l2 != NULL) l2 = l2->next;
    }

    struct ListNode* result = Finallist->next;
    free(Finallist);

    return result;
}
